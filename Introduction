To automated personalized policy generator tool with a GUI using Python. We'll use the PyQt5 library for the graphical user interface and the python-docx library to generate the final policy as a .docx file. Here's an outline of the steps we'll follow:

1. Set up the project and install dependencies.
2. Design the GUI using PyQt5.
3. Implement functionality for each page.
4. Generate the policy using the collected information.
5. Save the generated policy as a .docx file.

Let's get started!

## Step 1: Set up the project and install dependencies
To begin, create a new directory for your project and set up a virtual environment. Then, install the required dependencies using pip:

```
$ mkdir policy_generator
$ cd policy_generator
$ python3 -m venv venv
$ source venv/bin/activate
$ pip install pyqt5 python-docx
```

## Step 2: Design the GUI using PyQt5
Create a file called `policy_generator.py` and open it in your preferred text editor. In this file, we'll define the GUI for our policy generator.

```python
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QStackedWidget, QPushButton


class PolicyGenerator(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle('Policy Generator')

        # Create a stack of pages
        self.pages = QStackedWidget()

        # Create buttons for navigation
        self.next_button = QPushButton('Next')
        self.back_button = QPushButton('Back')
        self.next_button.clicked.connect(self.next_page)
        self.back_button.clicked.connect(self.previous_page)

        # Create the layout
        layout = QVBoxLayout()
        layout.addWidget(self.pages)
        layout.addWidget(self.next_button)
        layout.addWidget(self.back_button)

        self.setLayout(layout)

    def next_page(self):
        current_index = self.pages.currentIndex()
        if current_index < self.pages.count() - 1:
            self.pages.setCurrentIndex(current_index + 1)

    def previous_page(self):
        current_index = self.pages.currentIndex()
        if current_index > 0:
            self.pages.setCurrentIndex(current_index - 1)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    generator = PolicyGenerator()
    generator.show()
    sys.exit(app.exec_())
```

This code sets up a basic PyQt5 application with navigation buttons and a stack of pages. Each page will represent a section of the policy.

## Step 3: Implement functionality for each page
We'll create a separate Python file for each page to keep the code organized. Create a file called `privacy_policy_uses.py` and define the following code:

```python
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel


class PrivacyPolicyUses(QWidget):
    def __init__(self):
        super().__init__()

        layout = QVBoxLayout()
        label = QLabel('Privacy Policy Uses Page')
        layout.addWidget(label)

        self.setLayout(layout)
```

Create separate files for the remaining pages (`user_information.py`, `collection_of_information.py`, etc.), and add similar code to each, modifying the page title and content accordingly.

## Step 4: Generate the policy using the collected information
Create a file called `policy_generator.py` and define the following code:

```python
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QStackedWidget, QPushButton
from privacy_policy_uses import PrivacyPolicyUses
from user_information import UserInformation
from collection_of_information import CollectionOfInformation
from use_of_information import UseOfInformation
from disclosure_of_information import DisclosureOfInformation
from use_of_tracking_technologies import UseOfTrackingTechnologies


from user_rights import UserRights
from final_details import FinalDetails
import sys


class PolicyGenerator(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle('Policy Generator')

        # Create a stack of pages
        self.pages = QStackedWidget()
        self.pages.addWidget(PrivacyPolicyUses())
        self.pages.addWidget(UserInformation())
        self.pages.addWidget(CollectionOfInformation())
        self.pages.addWidget(UseOfInformation())
        self.pages.addWidget(DisclosureOfInformation())
        self.pages.addWidget(UseOfTrackingTechnologies())
        self.pages.addWidget(UserRights())
        self.pages.addWidget(FinalDetails())

        # Create buttons for navigation
        self.next_button = QPushButton('Next')
        self.back_button = QPushButton('Back')
        self.next_button.clicked.connect(self.next_page)
        self.back_button.clicked.connect(self.previous_page)

        # Create the layout
        layout = QVBoxLayout()
        layout.addWidget(self.pages)
        layout.addWidget(self.next_button)
        layout.addWidget(self.back_button)

        self.setLayout(layout)

    def next_page(self):
        current_index = self.pages.currentIndex()
        if current_index < self.pages.count() - 1:
            self.pages.setCurrentIndex(current_index + 1)

    def previous_page(self):
        current_index = self.pages.currentIndex()
        if current_index > 0:
            self.pages.setCurrentIndex(current_index - 1)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    generator = PolicyGenerator()
    generator.show()
    sys.exit(app.exec_())
```

In this code, we import the page classes we created earlier and add them to the stack of pages. We also update the navigation buttons to move between the pages.

## Step 5: Save the generated policy as a .docx file
Finally, we'll generate the policy using the collected information and save it as a .docx file. Add the following code to the `policy_generator.py` file:

```python
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QStackedWidget, QPushButton
from PyQt5.QtGui import QTextDocument
from privacy_policy_uses import PrivacyPolicyUses
from user_information import UserInformation
from collection_of_information import CollectionOfInformation
from use_of_information import UseOfInformation
from disclosure_of_information import DisclosureOfInformation
from use_of_tracking_technologies import UseOfTrackingTechnologies
from user_rights import UserRights
from final_details import FinalDetails
import sys
from docx import Document


class PolicyGenerator(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle('Policy Generator')

        # Create a stack of pages
        self.pages = QStackedWidget()
        self.pages.addWidget(PrivacyPolicyUses())
        self.pages.addWidget(UserInformation())
        self.pages.addWidget(CollectionOfInformation())
        self.pages.addWidget(UseOfInformation())
        self.pages.addWidget(DisclosureOfInformation())
        self.pages.addWidget(UseOfTrackingTechnologies())
        self.pages.addWidget(UserRights())
        self.pages.addWidget(FinalDetails())

        # Create buttons for navigation
        self.next_button = QPushButton('Next')
        self.back_button = QPushButton('Back')
        self.next_button.clicked.connect(self.next_page)
        self.back_button.clicked.connect(self.previous_page)

        # Create the layout
        layout = QVBoxLayout()
        layout.addWidget(self.pages)
        layout.addWidget(self.next_button)
        layout.addWidget(self.back_button)

        self.setLayout(layout)

    def next_page(self):
        current_index = self.pages.currentIndex()
        if current_index < self.pages.count() - 1:
            self.pages.setCurrentIndex(current_index + 1)

    def previous_page(self):
        current_index = self.pages.currentIndex()
        if current_index > 0:
            self.pages.setCurrentIndex(current_index - 

1)

    def generate_policy(self):
        policy_text = ''
        for i in range(self.pages.count()):
            page = self.pages.widget(i)
            if isinstance(page, QWidget):
                text_widget = page.findChild(QLabel)
                if text_widget:
                    policy_text += text_widget.text() + '\n'

        # Save the policy as a .docx file
        document = Document()
        document.add_paragraph(policy_text)
        document.save('generated_policy.docx')


if __name__ == '__main__':
    app = QApplication(sys.argv)
    generator = PolicyGenerator()
    generator.show()
    generator.generate_policy()
    sys.exit(app.exec_())
```

In this code, we added a `generate_policy()` method that collects the text from each page and concatenates it into a single policy text. Then, we use the `python-docx` library to create a new `Document`, add the policy text as a paragraph, and save it as a .docx file.

That's it! You now have a personalized policy generator tool with a GUI. Each page represents a section of the policy, and the generated policy can be saved as a .docx file.

Note: Remember to create the remaining page files (`user_information.py`, `collection_of_information.py`, etc.) using a similar structure and add appropriate widgets to collect user input for each section.

Remember to save the file and run it using `python policy_generator.py` command in your terminal.
